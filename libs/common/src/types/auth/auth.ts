// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v5.26.1
// source: proto/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Empty } from "google/protobuf/empty";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

export interface ProfileResponse {
  userId: string;
  username: string;
  email: string;
  picture?: string | undefined;
  name?: string | undefined;
}

export interface ProfileDto {
  username: string;
}

export interface ConfirmOTPDto {
  message?: string | undefined;
  statusCode?: number | undefined;
  otp?: number | undefined;
  userId?: string | undefined;
}

export interface EmailResponse {
  email?: string | undefined;
  statusCode?: number | undefined;
  message?: string | undefined;
  userId?: string | undefined;
}

export interface TokenResponse {
  accessToken?: string | undefined;
  refreshToken?: string | undefined;
  message?: string | undefined;
  statusCode?: number | undefined;
}

export interface UserResponse {
  username?: string | undefined;
  sub?: string | undefined;
  message?: string | undefined;
  statusCode?: number | undefined;
}

export interface SigninDto {
  username: string;
  userId: string;
}

export interface SignupDto {
  username: string;
  password: string;
  email: string;
}

export interface ValidateDto {
  username: string;
  password: string;
}

export interface GetEmailDto {
  userId: string;
}

export interface MailResponse {
  email: string;
}

export interface GoogleLoginDto {
  email: string;
  name: string;
  picture: string;
  googleId: string;
}

export interface ForgotPasswordDto {
  email: string;
}

export interface ResetPasswordDto {
  token: string;
  password: string;
}

export const AUTH_PACKAGE_NAME = "auth";

export interface AuthServiceClient {
  signin(request: SigninDto): Observable<EmailResponse>;

  signup(request: SignupDto): Observable<EmailResponse>;

  validate(request: ValidateDto): Observable<UserResponse>;

  confirmOtp(request: ConfirmOTPDto): Observable<TokenResponse>;

  refreshToken(request: SigninDto): Observable<TokenResponse>;

  profile(request: ProfileDto): Observable<ProfileResponse>;

  getEmail(request: GetEmailDto): Observable<MailResponse>;

  googleLogin(request: GoogleLoginDto): Observable<TokenResponse>;

  forgotPassword(request: ForgotPasswordDto): Observable<Empty>;

  resetPassword(request: ResetPasswordDto): Observable<Empty>;
}

export interface AuthServiceController {
  signin(request: SigninDto): Promise<EmailResponse> | Observable<EmailResponse> | EmailResponse;

  signup(request: SignupDto): Promise<EmailResponse> | Observable<EmailResponse> | EmailResponse;

  validate(request: ValidateDto): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  confirmOtp(request: ConfirmOTPDto): Promise<TokenResponse> | Observable<TokenResponse> | TokenResponse;

  refreshToken(request: SigninDto): Promise<TokenResponse> | Observable<TokenResponse> | TokenResponse;

  profile(request: ProfileDto): Promise<ProfileResponse> | Observable<ProfileResponse> | ProfileResponse;

  getEmail(request: GetEmailDto): Promise<MailResponse> | Observable<MailResponse> | MailResponse;

  googleLogin(request: GoogleLoginDto): Promise<TokenResponse> | Observable<TokenResponse> | TokenResponse;

  forgotPassword(request: ForgotPasswordDto): void;

  resetPassword(request: ResetPasswordDto): void;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "signin",
      "signup",
      "validate",
      "confirmOtp",
      "refreshToken",
      "profile",
      "getEmail",
      "googleLogin",
      "forgotPassword",
      "resetPassword",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
