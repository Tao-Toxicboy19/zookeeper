// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v5.26.1
// source: proto/key.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "key";

export interface CreateKeyDto {
  userId: string;
  apiKey: string;
  secretKey: string;
}

export interface KeyUserId {
  userId: string;
}

export interface KeyResponse {
  apiKey?: string | undefined;
  secretKey?: string | undefined;
  statusCode?: number | undefined;
  message?: string | undefined;
}

export const KEY_PACKAGE_NAME = "key";

export interface KeyServiceClient {
  createKey(request: CreateKeyDto): Observable<KeyResponse>;

  getKey(request: KeyUserId): Observable<KeyResponse>;
}

export interface KeyServiceController {
  createKey(request: CreateKeyDto): Promise<KeyResponse> | Observable<KeyResponse> | KeyResponse;

  getKey(request: KeyUserId): Promise<KeyResponse> | Observable<KeyResponse> | KeyResponse;
}

export function KeyServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createKey", "getKey"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("KeyService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("KeyService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const KEY_SERVICE_NAME = "KeyService";
